name: test / build / release docker image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  run_tests:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      checks: write

    steps:
      - name: Set environment variables
        run: |
          echo "KUBECONFIG=$PWD/kind.kubeconfig" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}2

      - name: Install cargo2junit
        run: |
          which cargo || cargo install cargo2junit

      - name: Run tests
        run: |
          cargo test  -- -Z unstable-options --format json --report-time | tee results.json
          cat results.json | cargo2junit > results.xml

      # sorry for this: ugly work around to get a table with all executed tests (not only the failed ones)
      - name: Create Test Report Summary
        id: test_summary
        run: |
          # cargo output has some nasty combination of escape characters which confuse bash
          sed -i.bak -e 's/\\"//g' results.json

          echo "|test|result|duration|"
          echo "|:---|------|--------|"
          while read line
          do
              # echo "${line}"|jq 'if .event != "started" and .type == "suite" then {xxx: .} else empty end'
              echo "${line}"|jq -r 'if .event != "started" and .type != "suite" and .event == "ok" then ["|","✅|", .name,"|",(.exec_time|tostring),"s","|"]|add else empty end'
              echo "${line}"|jq -r 'if .event != "started" and .type != "suite" and .event == "failed" then ["|","❌|", .name,"|",(.exec_time|tostring),"s","|"]|add else empty end'
          done < results.json > result.md

          export SUMMARY="$(cat results.md)"
          SUMMARY="${SUMMARY//'%'/'%25'}"
          SUMMARY="${SUMMARY//$'\n'/'%0A'}"
          SUMMARY="${SUMMARY//$'\r'/'%0D'}"
          echo "::set-output name=summary::$(echo "$SUMMARY")"

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with:
          report_paths: 'results.xml'
          check_name: Test Report
          fail_on_failure: true
          require_tests: true
          summary: ${{ steps.test_summary.outputs.summary }}


  build_docker_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          cache-from: type=registry,ref=ghcr.io/innoq/self-service-operators/buildcache
          cache-to: type=registry,ref=ghcr.io/innoq/self-service-operators/buildcache,mode=max

  publish_docker_image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs:
      - run_tests
      - build_docker_image
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          flavor: |
            latest=auto

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/innoq/self-service-operators/buildcache