apiVersion: batch/v1
kind: Job
metadata:
  name: ssh-key-creator-{{ __PROJECT_NAME__ }}
  namespace: argocd
  annotations:
    project.selfservice.innoq.io/apply: once
spec:
  template:
    spec:
      serviceAccountName: ssh-key-creator-{{ __PROJECT_NAME__ }}
      containers:
      - image: alpine
        env:
          - {name: KEY_PAIR_SECRET_NAME,   value: "selfservice-project-argocd-repo-{{ __PROJECT_NAME__ }}" }
          - {name: PUBLIC_KEY_SECRET_NAME, value: "selfservice-project-argocd-repo-{{ __PROJECT_NAME__ }}-ssh-public-key" }
          - {name: MY_UID, valueFrom: { fieldRef: { fieldPath: metadata.uid } } }
          - {name: MY_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
          - {name: ARGOCD_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace } } }
        name: ssh-key-creator-{{ __PROJECT_NAME__ }}
        command:
          - sh
          - -ec
          - |
            apk add curl openssh-keygen jq

            kubecurl() {
              set -e
              local method=$1
              shift
              local resource=$1
              shift
              local data=$*
              echo "${data}" > /tmp/data
              test "${method}" = "PATCH" && local content_type='Content-Type: application/merge-patch+json' || local content_type='Content-Type: application/json'

              (set -ex;
              curl -fk -X ${method} -H "Accept: application/json, */*" -H "${content_type}" \
                -H"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                ${data:+-i -d@/tmp/data} \
                "https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}${resource}?fieldManager=create-ssh-keys-job"
              )
            }
            
            # get the owner reference of the service account as it references the project
            owner_references=$(kubecurl GET /api/v1/namespaces/${ARGOCD_NAMESPACE}/serviceaccounts/ssh-key-creator-{{ __PROJECT_NAME__ }}|jq -r ".metadata.ownerReferences")

            # create ssh key pair
            (set -ex; ssh-keygen -t rsa -b 4096 -C "ssh key generated for project '{{ __PROJECT_NAME__ }}' by projects.selfservice.innoq.io manifest" -f id_rsa -N "")

            # save public key in a config map that will be accessible by everyone
            cat<<EOF|jq -r > public-key.json
            {
              "kind": "ConfigMap",
              "apiVersion": "v1",
              "metadata": {
                "name": "${PUBLIC_KEY_SECRET_NAME}",
                "ownerReferences": ${owner_references}
              },
              "data": {
                "id_rsa.pub": "$(cat id_rsa.pub)"
              }
            }
            EOF

            echo "public-key"
            cat public-key.json

            kubecurl POST /api/v1/namespaces/${ARGOCD_NAMESPACE}/configmaps "$(cat public-key.json)"
            

            {{~#each argoAppRepos }}

            # save keypair in a secret ... putting public key here as well for convinience
            cat<<EOF|jq -r > keypair.json
            {
              "kind": "Secret",
              "apiVersion": "v1",
              "metadata": {
                "name": "${KEY_PAIR_SECRET_NAME}-{{ @key }}",
                "ownerReferences": ${owner_references},
                "annotations": {
                    "managed-by": "argocd.argoproj.io"
                },
                "labels": {
                    "argocd.argoproj.io/secret-type": "repository"
                }
              },
              "data": {
                "type": "$(printf "git"|base64 -w0)",
                "url": "$(printf "{{ this }}"|base64 -w0)",
                "sshPrivateKey": "$(cat id_rsa|base64 -w0)",
                "sshPublicKey": "$(cat id_rsa.pub|base64 -w0)"
              }
            }
            EOF
            
            echo "private-public-key"
            cat keypair.json

            kubecurl POST /api/v1/namespaces/${ARGOCD_NAMESPACE}/secrets    "$(cat keypair.json)"
            {{~/each}}


            # own all resources that should be deleted after this job has finished
            reference='{"metadata":{"ownerReferences":[{"apiVersion":"v1","kind":"Pod","name":"'${MY_NAME}'","uid":"'${MY_UID}'"}]}}'
            for resource in /apis/rbac.authorization.k8s.io/v1/namespaces/${ARGOCD_NAMESPACE}/roles \
                            /apis/rbac.authorization.k8s.io/v1/namespaces/${ARGOCD_NAMESPACE}/rolebindings \
                            /api/v1/namespaces/${ARGOCD_NAMESPACE}/serviceaccounts
            do
              kubecurl PATCH ${resource}/ssh-key-creator-{{ __PROJECT_NAME__ }} '{"metadata":{"ownerReferences":null}}'
              echo "PATCH 1"; sleep 1;
              kubecurl PATCH ${resource}/ssh-key-creator-{{ __PROJECT_NAME__ }} "${reference}"
              echo "PATCH 2"; sleep 1;
            done


            kubecurl DELETE /apis/batch/v1/namespaces/${ARGOCD_NAMESPACE}/jobs/ssh-key-creator-{{ __PROJECT_NAME__ }} '{"propagationPolicy":"Foreground"}'

      restartPolicy: OnFailure
