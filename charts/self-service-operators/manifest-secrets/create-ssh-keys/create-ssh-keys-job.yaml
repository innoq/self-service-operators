apiVersion: batch/v1
kind: Job
metadata:
  name: ssh-key-creator
  namespace: {{ __PROJECT_NAME__ }}
  annotations:
    project.selfservice.innoq.io/apply: once
spec:
  template:
    spec:
      serviceAccountName: ssh-key-creator
      containers:
      - image: alpine
        env:
          - {name: KEY_PAIR_SECRET_NAME, value: "ssh-key-pair" }
          - {name: PUBLIC_KEY_SECRET_NAME, value: "ssh-public-key" }
          - {name: MY_UID, valueFrom: { fieldRef: { fieldPath: metadata.uid } } }
          - {name: MY_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
        name: ssh-key-creator
        command:
          - sh
          - -ec
          - |
            apk add curl openssh-keygen jq

            kubecurl() {
              local method=$1
              shift
              local resource=$1
              shift
              local data=$*
              echo "${data}" > /tmp/data
              test "${method}" = "PATCH" && local content_type='Content-Type: application/merge-patch+json' || local content_type='Content-Type: application/json'

              (set -x;
              curl -i -fk -X ${method} -H "Accept: application/json, */*" -H "${content_type}" \
                -H"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                ${data:+-d@/tmp/data} \
                "https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}${resource}?fieldManager=create-ssh-keys-job"
                )
            }

            # create ssh key pair
            ssh-keygen -t rsa -b 4096 -C "ssh key generated for project '{{ __PROJECT_NAME__ }}' by projects.selfservice.innoq.io manifest" -f id_rsa -N ""

            # save public key in a config map that will be accessible by everyone
            echo '{"kind":"ConfigMap","apiVersion":"v1","metadata":{"name":"'${PUBLIC_KEY_SECRET_NAME}'"},"data":{"id_rsa.pub":"'$(cat id_rsa.pub)'"}}' | \
               jq -r > public-key.json
            
            # save keypair in a secret ... putting public key here as well for convinience
            echo '{"kind":"Secret","apiVersion":"v1","metadata":{"name":"'${KEY_PAIR_SECRET_NAME}'"},"data":{"id_rsa":"'$(cat id_rsa|base64 -w0)'","id_rsa.pub":"'$(cat id_rsa.pub|base64 -w0)'"}}' | \
              jq -r > keypair.json

            kubecurl POST /api/v1/namespaces/{{ __PROJECT_NAME__ }}/configmaps "$(cat public-key.json)"
            kubecurl POST /api/v1/namespaces/{{ __PROJECT_NAME__ }}/secrets    "$(cat keypair.json)"

            # own all resources that should be deleted after this job has finished
            reference='{"metadata":{"ownerReferences":[{"apiVersion":"v1","kind":"Pod","name":"'${MY_NAME}'","uid":"'${MY_UID}'"}]}}'
            for resource in /apis/rbac.authorization.k8s.io/v1/namespaces/{{ __PROJECT_NAME__ }}/roles \
                            /apis/rbac.authorization.k8s.io/v1/namespaces/{{ __PROJECT_NAME__ }}/rolebindings \
                            /api/v1/namespaces/{{ __PROJECT_NAME__ }}/serviceaccounts
            do
              kubecurl PATCH ${resource}/ssh-key-creator '{"metadata":{"ownerReferences":null}}'
              echo "PATCH 1"; sleep 1;
              kubecurl PATCH ${resource}/ssh-key-creator "${reference}"
              echo "PATCH 2"; sleep 1;
            done


            kubecurl DELETE /apis/batch/v1/namespaces/{{ __PROJECT_NAME__ }}/jobs/ssh-key-creator '{"propagationPolicy":"Foreground"}'

      restartPolicy: OnFailure
